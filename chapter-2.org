* Chapter 2: Induction, Recursion, and Scope

The chapter begins by introducing the reader to Backus Naur Form and helping them reason about it with the help of exercises.

* Inductive Specification
A way to specify data types that are potentially infinite.

* Backus-Naur Form
** Syntactic Categories / Non-terminals

<list-of-numbers> ::= () | (<number>.<list-of-numbers>)

Using Kleene Star notation
<list-of-numbers> ::= ({<number>}*)

* Grammar
A grammar of a language describes using BNF the kind of structures possible to be
constructed with the help of it.

<list> ::= ({<datum>}*)
<dotted-datum> ::= ({<datum>}+ . <datum>)
<vector> ::= #({<datum>}*)
<datum> ::= <number> | <symbol> | <boolean> | <string> | <list> | <dotted-datum> | <vector>

* Exercise 2.1.2

This exercise is a good one in that it makes one think closely about the need for a dot syntax.
When the Kleene * and Kleene + is not used, the requirement for the dot syntax becomes apparent.

Without the dot syntax list ::= () | (<datum> <list>) would yield a nested structure. That is:

#+BEGIN_SRC
(<datum> (<datum> <list>))
(<datum> (<datum> ()))
#+END_SRC

Which is a recursively nested object, whereas with a dot notation, this nesting doesn't occur.

This exercise and the next one is also making me aware of the requirement for a null element
but this hasn't been taught in the textbook yet.

This object is required for the definition of <vector> without the Kleene star.

#+BEGIN_SRC
<vector> ::= #() | #(<datum> <vector>)
#+END_SRC

This would lead to the same problem as above. But a dot operator for <vector> doesn't seem to exist.

In the absence of this, the first solution that comes to my mind is to to introduce the null element.

* Exercise 2.1.3

The data structure (a . b . c) while not permissible with the grammar defined in the previous exercise seems like a 
valid data structure in Racket. [[https://stackoverflow.com/questions/7449865/scheme-lists-of-three-dotted-elements-returning-strangely-like-an-infix-operat][Stack Overflow]] reveals that it is a modification done on the reader that treats the . as an
infix operator.

* Context Free and Context Sensitive *
BNF notation is context free as a rule defining a given syntactic category may be applied in any context that makes reference to that syntactic category.
Context Sensitivity means that the state of the given context in which it is being applied matters. This is illustrated with the help of the syntactical construction of a binary search tree.

Context sensitivity also arises when a certain rule such as the declaration of an identifier before its use is required by the environment of evaluation.
Such constraints are said to be enforced with the help of formal methods. Since this often becomes cumbersome, this is added in using other methods.

Think this is a good point at which to refer how ambiguity can arise in a context free setting.

*Structural Recursion*
When defining a program based on structural induction, the structure of the program should be patterned after the structure of the data.

* Exercise
Exercises in this chapter are worth doing, especially the Exercise 2.2.9 as this feels like a lead up to constructing
structures which would be used in building up an interpreter later in the book.

The 2nd part in Exercise 2.2.9 is a bit challenging and made me think about the differences in order of construction
in structural recursion vs. tail recursion.

*Associativitiy of composition*

In the previous examples there was a problem of having wrong nesting when trying to build up the path trace in a list.
This meant that a structural recursion would yield (((() c) b) a) instead of (c (b (a ()))). This meant that the path
needs to be reversed to achieve the proper context or coupling for the elements in a list. This can be achieved using
tail recursion. Now, the same bracketing when composing and applying to an argument yields the same result. I realised
this when working through Example 2.2.9/4 where I found out that the reverse sequence gets executed when creating a
series of compositions. This means that when the operation is associative, the bracketing order doesn't matter
which is indeed a trivial observation, but the distinction here is, even nesting doesn't make a difference.
That is (composition ident c b a) can be represented as both (((ident c) b) a) and (ident (c (b a)))

** Static vs. Dynamic properties

In Scheme, the relation between a variable reference and the formal parameter to which it refers is a static property.

The distinction between bound and free variables. Free variables through an error if they are not bound somewhere in the course of evaluation.
The last point of giving a bound is from the environment/system in which the expression is evaluated, such bindings are called global bindings.
And the ones that are bound by a formal parameter of an enclosing lambda expression is called lexically bound.

Since the lexical binding of a variable done once cannot be overwritten (verify), then the value of a bound variable is always constant,
when evaluating the code.

Lambda expressions without free variables are called combinators.

* Scope *
The area in which a variable declaration is effective

* Region *
The area to which the variable declaration applies.

I think it could be due to variable shadowing that region and scope may not be the same.

* Lexical/Statical scope *
Languages in which the scope can be entirely determined at runtime.
