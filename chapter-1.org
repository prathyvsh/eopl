* Chapter 1

** Syntax
Rules governing how a programming language is formed

** Semantics
Rules that specify its meaning

** Section 1.1: Simple Expressions
Introduces several ways of building Scheme expressions.

*** Statement
A programming language construct that is evaluated only for its side effect.
Eg: Assignment, I/O statements, control statements.

Expressions: Programming language constructs that are evaluated to obtain values.

Expressions that are evaluated solely for their value, and not for any computational effects are said to be functional

*** 1.1.1 Literals, Procedure Calls, and Variables

**** Literals
They always return the expressed value.
Eg: Numbers, Booleans, Strings

**** Variable References

A value can be bound to a variable. This is its reference.

A variable is said to denote the value of its binding.

The data that can be bound to variables constitute the denoted values of a programming language.

In Scheme, the denoted values and expressed values are the same, at least in the absence of variable assignment.

In the book, the term function is reserved for mathematical functions and functions take on the name of procedure.

In the expression (p 2 3) the procedure p is said to be applied to the arguments 2 and 3.

This process of procedure call is known as application or combination.

** Section 1.2
Data types

** Section 1.3
Procedures
