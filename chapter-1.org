* Chapter 1

** Syntax
Rules governing how a programming language is formed

** Semantics
Rules that specify its meaning

** Section 1.1: Simple Expressions
Introduces several ways of building Scheme expressions.

*** Statement
A programming language construct that is evaluated only for its side effect.
Eg: Assignment, I/O statements, control statements.

*Expressions*: Programming language constructs that are evaluated to obtain values.

Expressions that are evaluated solely for their value, and not for any computational effects are said to be functional

*** 1.1.1 Literals, Procedure Calls, and Variables

**** Literals
They always return the expressed value.
Eg: Numbers, Booleans, Strings

**** Variable References

A value can be bound to a variable. This is its reference.

A variable is said to denote the value of its binding.

The data that can be bound to variables constitute the denoted values of a programming language.

In Scheme, the denoted values and expressed values are the same, at least in the absence of variable assignment.

In the book, the term function is reserved for mathematical functions and functions take on the name of procedure.

In the expression (p 2 3) the procedure p is said to be applied to the arguments 2 and 3.

This process of procedure call is known as application or combination.

An operation can have > 0 operands.

Operator and operands are components that are themselves expressions.

Expressions that are part of other expressions are called *subexpressions*.

The operator subexpression is evaluated to obtain a procedure, while operand subexpressions are evaluated to obtain the arguments of the call before invoking the procedure.

*Arguments* are also referred to as *actual parameters* or simply parameters.

In Scheme, the order in which operator and operand expressions are evaluated is not specified.

Procedures that return procedures are called higher-order procedures.

*** Special forms

Special forms are those in which the rules of evaluation are different than expression evaluation.

Special form identifiers are called *keywords*.

Each special form has its own sequencing rule, that is to say its own order of subexpression evaluation.

In the case of define, the expression is evaluated first and the variable is bound to the value of the expression.

The definitions and expressions are said to be at top level.

*** REPL = Read Eval Print Loop

The use of define is restricted to the top level in this book.

Redefinition of all variables is allowed in the Scheme environment in this book.

The distinction between the environment and the language is introduced early in this book.

*** Conditional Expressions

#+BEGIN_SRC :scheme
(if test-exp then-exp else-exp)
#+END_SRC

The use of if to guard against errors is only possible if it one of the branches is not evaluated as in the case of:

#+BEGIN_SRC :scheme
(if (zero? a) 0 (/ x a))
#+END_SRC

** Section 1.2: Data types

For data types three things of concern are:

1. Set of values of that type
2. Procedures that operate on that type
3. Representation of value of the type internally as literals in programs or externally as characters that are read or printed.

Dynamic Type Checking when the standard procedures are invoked
Static Type Checking when the check is performed at compile time.

Characters are prefixed by #\

Identifiers when treated as values are called Symbols in Scheme.

*Lists*

An ordered sequence of elements which may be of arbitrary types. Lists are used to combine multiple values into a single compound object.

*Cons*

Short for Construct

#+BEGIN_SRC
(car (cons v l)) = v
(cdr (cons v l)) = l
#+END_SRC

*Pair*

A pair also known as dotted pair or cons cell is a structure with two fields called car and cdr.

A list that doesn't end in an empty list is called an improper list. It can be denoted using the dotted pair notation.

#+BEGIN_SRC
`(a (b c) d)
;; can be denoted as
`(a . ((b . (c . ())) . (d . ())))
#+END_SRC

eq? checks if two elements have the same written representation. This is not necessarily true for numbers, pairs, lists, and strings.

A hint is made to the aspect of structural sharing whereby a change in a certain shared data structure gets propagated throughout the environment. Data structures that refers to this shared data structure also gets changed as a result of this process.

*Vectors*

Distinction between derived data type and primitive data types is drawn.

Lists are identified as a derived data type as they are formed from the primitive data types: the cons cell and the empty list.

*Records*
Heterogenous compound data types that can be selected by their field names and provides random access to their components.

*Arrays*
Homogenous compound data types that provide random access to their components.

Scheme supplies vectors which can be used in place of records and arrays.

*Cell*
A one element vector

*Higher Order Functions*

*Apply*
Apply allows to perform an application on arguments that have already been assembled into list form.

*Lambda*
Lambda functions are used to define procedures which might not be bound to a variable.

The form of lambda function is:
(lambda formals body)
The formals declare formal parameters which can only be used locally within the lambda function.

*First class procedures*
A value is said to be first class if it may be passed to and return from procedures and stored in data structures.
In Scheme all values are first class, including procedures.

** Section 1.3
Procedures

*Currying*
Using currying one can replace a procedure with n arguments to a procedure requiring n-1 arguments and repeat this process successively. 

*Arity*
The number of arguments taken by a function.

*Variable arity*
The idea of variable arity is introduced by using a single formal argument of a lambda function treated as a list.

