* Essentials of Programming Languages

This is a comparative study of the three versions of Essentials of Programming Languages. I intend to study the three editions and compare them for the strengths and weaknesses. So far, I have completed 2 chapters of the first edition and is working on the second and third editions now.

* Reading List

** First Edition, 1992

** Second Edition, 2001

** The Further Reading section on this edition looks terse and doesn't seem to have a detailed description as can be seen in the first and third edition.

** Third Edition, 2008

A table of how much overlap there is between the chapters I think would be of benefit for someone looking to do such a comparative study.

| Topic | First Edition | Second Edition | Third Edition |
----------------------------------------------------------
| Foreword | Same | Same | Contains a postscript |
| Introduction | | | |

* First Edition

[[Cover Image of First Edition][./cover.jpg]]

** Review

* [[./chapter-1.org][Chapter 1: Tools for Symbolic Programming]]

** Synopsis

The book gives a very brief introduction to Scheme language in its first chapter.
Next, the reader is introduced to the idea of recursion and data structures. The idea of scope of variables is introduced which perhaps will also give an idea about language and the environment. Ideas of abstracting data is introduced in the third chapter.
Lambda Calculus which is the cornerstone of Scheme is introduced and an introduction to imperative programming is given by the 4th chapter. 
Next, the text moves on to give an idea of semantics of the programming languages using the techniques detailed above.

** Overview

First chapter goes on a quick tour of the Scheme language. If you have not had prior exposure to the language, I recommend a more thorough guide such as HtDP before you dive into this one. The details provided in the first chapter on the language constructs are crisp and to the point. One has to be accustomed to the intricacies of Scheme to get a firm grasp on the nuances implicit in the examples being mentioned here.

To give an idea of the expected depth in your language, ideas such as higher order functions are introduced within a page with map and andmap being briefly introduced with their demonstrations of working without any hints on how their construction is done. And there are doozies like:

#+BEGIN_SRC scheme
(apply apply (list procedure? (list apply)))
#+END_SRC

which returns true. This is mentioned as a one liner to demonstrate how apply works iteratively.

*Chapter 2*
- Connection between inductive data specification and recursive programming.
- Notions related to scope of variables is introduced in this chapter

Chapter 2 is heavy on exercises and is a really good one to probably get a sense of demands put on your programming skills in the subsequent chapters.
These exercises particularly from 2.2.7-2.2.9 are interesting and gives a good overview of the techniques you need under your belt to go ahead (Verify this).

One thing I am noticing as I go through this text is that ideas like Lambda Calculus is introduced without showing the motivation. It is laid down as a given
and the student is asked to write algorithms to find the bound and free variables. While I have researched into why Lambda Calculus matters and can see how
free and bound variable segregation could be of help in subsequent programs in writing an interpreter, the book on its own doesn't supply these details and I think
might need further context building to ground why it is a significant theory for programming language engineering.

May be I can supplement it by reading papers like from Landin here?

I don't know if this is by design or because of the nature I'm reflecting on it: it really repays to revisit old solutions in the light of new knowledge you have gained.
For example, once you have thought about a new elucidation about Lambda Calculus, it becomes a good exercise to go back to the previous exercises such as the one on
car&cdr and free-vars/bound-vars to see if you could make them a little bit better. This sort of retrogressive polishing I think will help in creating a good base to think about and deal with the problems that arise when constructing programming languages.

The example on finding the free and bound variable in 2.3.2 and using the depth/position notation for variables are some of the challenging exercises which slowly warms up a developer to parsing the syntax of Lambda Calculus.

*Chapter 3*
- Data abstraction and examples of representational transformations.
- Syntactic abstractions such as variant record facility.

*Chapter 4*
- Lambda Calculus is introduced along with several rewrite rules that are basic program transformations.
- Brief overview of imperative programming

*Chapter 5-7 use 1-4 to describe semantics of programming languages*

*Chapter 5-10 goes from the derivation of a sequence of interpreters ranging from ver high  to very low level. This provides a solid hands-on understanding of programming language semantics and a disciplined approach to language implementation. Goes from the high-level operational specification which serves as a rapid prototype and ends with what is effectively assembly language.*

*Chapter 5*
- Interpreters as mechanisms for explaining the run-time behaviour of laguages
- Develops an interpreter for a simple, lexically scoped language with first-class procedures and variable assignment.
- Explores static and dynamic scoping and implementation of recursion.

*Chapter 6*
- Parameter passing mechanisms

*Chapter 7*
- Varieties of object-oriented facilities.
- Characterizations of inheritance and meta-classes.

*Chapter 8*
- Using continuation-passing style (CPS) to transform high-level interpreters into a flowchart-like form.
- Uses CPS as a technique for expressing recursion by iteration.

*Chapter 9*
- Transforms the interpreter to CPS style
- Applies techniques of chapter 3 to develop data structure representations of continuations
- Data abstraction techniques are used to eplore alternative representation strategies for the data manipulated by interpreters
- This allows for the ability to present continuations accessible to the programmer as first-class objects of computation

*Chapter 10*
- Transformation of interpreter to a set of data structures manipulated by a finite-state controller
- This makes the interpreter implementable in any low-level language
- The ability to represent the data structures of the interpreter in a single stack with static and dynamic links is shown
- This provides a solid understanding of stack-based language architectures and illustrates the power of algebraic reasoning techniques

*Chapter 11-12 applies techniques learnt so far to the development of scanners, parsers, and compilers*

*Chapter 11*
- Introduces lexical scaning and parsing techniques
- Program transformations clarify the relationship between recursive descent and table-driven parsers

*Chapter 12*
Shows how to start with a high-level functional specification of a language and by choosig suitable representations of data abstractions, to derive both a virtual machine and a cmopiler that translates the high-level language to code for the virtual machine.

*Chapter 13*
Found out that there is a chapter on types that didnâ€™t make it into the publication: https://web.archive.org/web/20070822021157/http://ftp.cs.indiana.edu/pub/eopl/ch13.ps
